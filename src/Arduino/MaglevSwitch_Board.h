#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/adc.h"
#include "hardware/gpio.h"
#include "hardware/i2c.h"
#include "hardware/flash.h"
#include "hardware/sync.h"
#include "typedef_common.h"
#include "typedef_v0.h"
#include "typedef_v1.h"
#include "Threshold_Data.h"

#ifndef MAGLEV_SWITCH_BOARD
#define MAGLEV_SWITCH_BOARD

const int MLSW_LOWER_LIMIT  = 1070;
const int MLSW_UPPER_LIMIT  = 3170;
const int MLSW_RANGE        = MLSW_UPPER_LIMIT - MLSW_LOWER_LIMIT;

static const unsigned char LOGO[] = { // Logo img
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xef, 0xdf, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xbf, 0xff, 0xdf, 0xff, 0xff, 
  0xff, 0xcf, 0xcf, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xbd, 0xff, 0xff, 0xfd, 0xdf, 0xff, 0xff, 
  0xff, 0xcf, 0xc7, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfd, 0xdf, 0xff, 0xff, 
  0xff, 0xaf, 0xd7, 0xa1, 0x47, 0xf7, 0x0f, 0xee, 0xfd, 0xfe, 0xdd, 0x9b, 0x60, 0x50, 0xf8, 0xff, 
  0xff, 0xaf, 0xdb, 0x9e, 0x3b, 0xf7, 0xf7, 0xed, 0xfd, 0xfd, 0xdd, 0xbb, 0xbd, 0x9f, 0xf7, 0xff, 
  0xff, 0x6f, 0x5b, 0xbf, 0x7d, 0xf7, 0xf7, 0xed, 0xfd, 0xe3, 0x9d, 0xbb, 0xbd, 0xdf, 0xf7, 0xff, 
  0xff, 0x6f, 0x5d, 0xbf, 0x7d, 0xf7, 0xf7, 0xdd, 0xfe, 0xdf, 0x5b, 0xbd, 0xbd, 0xdf, 0xf7, 0xff, 
  0xff, 0xef, 0x5c, 0xbf, 0x7d, 0xf7, 0x07, 0xdc, 0xfe, 0xbf, 0x6b, 0xbd, 0xbd, 0xdf, 0xf7, 0xff, 
  0xff, 0xef, 0x5e, 0xbf, 0x7d, 0xf7, 0xf7, 0xdf, 0xfe, 0xbf, 0x6b, 0xbd, 0xbd, 0xdf, 0xf7, 0xff, 
  0xff, 0xef, 0xdf, 0x9e, 0x3b, 0xf7, 0xf7, 0x3f, 0xff, 0xde, 0x6b, 0xbd, 0xbd, 0xdf, 0xf7, 0xff, 
  0xff, 0xef, 0xdf, 0xa1, 0x47, 0x07, 0x0c, 0x3e, 0xff, 0xe1, 0xf7, 0xbe, 0x63, 0xd0, 0xf7, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x3f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x3f, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x3f, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x3f, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x07, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0x00, 0x00, 0xff, 0x07, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x1f, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0x00, 0x00, 0xfe, 0x03, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0x00, 0x00, 0xfe, 0x01, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0x00, 0x00, 0xfe, 0x01, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x0f, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x07, 0x02, 0x00, 0x7e, 0x00, 0x00, 0xe0, 0x01, 0x00, 0xff, 0x03, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0x07, 0x02, 0x00, 0x7e, 0x20, 0x00, 0xe0, 0x03, 0x00, 0xff, 0x01, 0xfe, 0xff, 0xff, 
  0xff, 0xff, 0x07, 0x02, 0x00, 0x3e, 0x20, 0x00, 0xe0, 0x03, 0x00, 0xfe, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x07, 0x02, 0x00, 0x1e, 0x30, 0x00, 0xe0, 0x07, 0x00, 0x7e, 0x80, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x02, 0x00, 0x1e, 0x10, 0x00, 0xf0, 0x07, 0x00, 0x3c, 0xc0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x07, 0x00, 0x0e, 0x18, 0x00, 0xf0, 0x0f, 0x00, 0x1c, 0xe0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x07, 0x00, 0x0c, 0x18, 0x00, 0xf0, 0x0f, 0x00, 0x08, 0xf0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x07, 0x00, 0x04, 0x1c, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x03, 0x07, 0x00, 0x04, 0x0e, 0x00, 0xf0, 0x1f, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x01, 0x07, 0x00, 0x00, 0x0e, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x81, 0x07, 0x00, 0x00, 0x0f, 0x00, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x81, 0x07, 0x00, 0x00, 0x0f, 0x00, 0xf8, 0x7f, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x81, 0x07, 0x00, 0x80, 0x0f, 0x00, 0xf8, 0xff, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x07, 0x00, 0x80, 0x07, 0x00, 0xf8, 0xff, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x07, 0x00, 0xc0, 0x07, 0x00, 0xfc, 0xff, 0x01, 0x80, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x0f, 0x00, 0xc0, 0x07, 0x00, 0xfc, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x0f, 0x00, 0xe0, 0x07, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x0f, 0x00, 0xe0, 0x07, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 
  0xff, 0x7f, 0xc0, 0x0f, 0x00, 0xf0, 0x03, 0x00, 0xfe, 0x1f, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 
  0xff, 0x7f, 0xe0, 0x0f, 0x00, 0xf8, 0x03, 0x00, 0xfe, 0x0f, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 
  0xff, 0x7f, 0xe0, 0x0f, 0x00, 0xf8, 0x03, 0x00, 0xfe, 0x07, 0x08, 0x00, 0xfc, 0xff, 0xff, 0xff, 
  0xff, 0x7f, 0xe0, 0x0f, 0x00, 0xfc, 0x03, 0x00, 0xfe, 0x03, 0x0c, 0x00, 0xf8, 0xef, 0x1f, 0xef, 
  0xff, 0x7f, 0xe0, 0x0f, 0x00, 0xfc, 0x01, 0x00, 0xfe, 0x01, 0x1e, 0x00, 0xf8, 0xe7, 0x4f, 0xe6, 
  0xff, 0x3f, 0xf0, 0x0f, 0x00, 0xfe, 0x01, 0x00, 0xff, 0x00, 0x1f, 0x00, 0xf0, 0xef, 0xef, 0xee, 
  0x3f, 0x00, 0xf0, 0x0f, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x80, 0x3f, 0x00, 0xf0, 0xef, 0xef, 0xee, 
  0x3f, 0x00, 0xf0, 0x1f, 0x00, 0xff, 0x01, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0xe0, 0xef, 0xef, 0xee, 
  0x3f, 0x00, 0xf0, 0x1f, 0x00, 0xff, 0x01, 0x00, 0x00, 0xe0, 0x7f, 0x00, 0xe0, 0xef, 0xef, 0xee, 
  0x3f, 0x00, 0xf0, 0x1f, 0x80, 0xff, 0x00, 0x00, 0x00, 0xf0, 0x7f, 0x00, 0xc0, 0xef, 0x4d, 0xee, 
  0x3f, 0x00, 0xf8, 0x1f, 0xc0, 0xff, 0x01, 0x00, 0x00, 0xf8, 0xff, 0x00, 0xc0, 0xef, 0x1d, 0xef, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

struct EncoderConditions{
  bool A;
  bool B;
  int pulseCount;
  double position;
};

class MaglevSwitchBoard{
public:
    MaglevSwitchBoard();
    MaglevSwitchBoard(uint16_t version, char* swCodesLayer1, char* swCodesLayer2, 
      ThresholdData* actuationDepth, ThresholdData* releaseDepth, uint8_t* outCodes);
    bool updateState(void);
    uint16_t currentMaglevValue(uint8_t);
    uint8_t outCodesCnt(void);
    bool encoderPressed(void);

    bool switchGpioInit(void);
    bool rotaryEncoderInit(void);
    bool i2cInit(void);
    void setThreshold(uint16_t* actuationDepth, uint16_t* releaseDepth);

private:
    const uint8_t SW_NUM; 
    const uint8_t DIRECT_SW_NUM;
    const uint8_t MATRIX_OUT_NUM;
    const uint8_t MATRIX_IN_NUM;

    const uint8_t* SW_GPIO; 
    const uint8_t* MATRIX_OUT_GPIO;
    const uint8_t* MATRIX_IN_GPIO;
    const uint32_t* STATUS_BITS;
    const uint32_t* STATUS_BITS_SW;

    char* swCodes_;
    char swCodesLayer1_[SW_NUM_101];
    char swCodesLayer2_[SW_NUM_101];

    uint32_t switchStatusBits_;
    uint32_t switchStatusBitsPrev_;

    uint8_t* outCodes_;
    uint8_t outCodesCnt_;
    bool encoderSwPressed_;
    
    int8_t fnSw_;

    ThresholdData* actuationDepth_;
    ThresholdData* releaseDepth_;
    uint16_t currentDepth_[4];
    uint16_t prevDepth_[4];
    bool rangePrev_[4];
    bool isGoingDownPrev_[4];
    bool pressedPrev_[4];

    bool (MaglevSwitchBoard::*updateFunc)(void);

    void updateEncoderSwitch(void);
    void updateAnalogueSwitch(void);
    void updateDigitalSwitch(void);
    void updateMatrix(void);

    void makeSendCodes(void);
    void switchLayer(void);
    
    uint8_t countSetBits(uint32_t n);
    void getActiveCodes(uint32_t bits, uint8_t distNum);

    bool isPressed(uint8_t idx);
    bool isNegative(uint16_t minuend,uint16_t subtrahend);
    bool getDirection(uint16_t prev, uint16_t current);
    uint8_t getTurning(bool direction, bool directionPrev, uint8_t modePrev);
    bool getStaying(uint16_t prev, uint16_t current, uint8_t range, uint8_t rangePrev);
    uint8_t getRange(uint16_t current, uint16_t release_, uint16_t actuation);
};
#endif
